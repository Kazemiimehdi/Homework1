home work 3
{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "class Node:\n",
        "  def __init__(self, coef, power):\n",
        "    self.coef = coef\n",
        "    self.power = power\n",
        "    self.prev = None\n",
        "    self.next = None\n",
        "\n",
        "class List:\n",
        "  def __init__(self):\n",
        "    self.head = Node(None, None)\n",
        "    self.head.next = self.head\n",
        "    self.head.prev = self.head\n",
        "    self.n = 0\n",
        "\n",
        "  # it will be used for insert method\n",
        "  def insert_after(self, x, coef, power):\n",
        "    if self.size() == 0:\n",
        "      raise Exception(\"List is empty.\")\n",
        "    y = Node(coef, power)\n",
        "    self.n += 1\n",
        "    y.prev = x\n",
        "    y.next = x.next\n",
        "    x.next = y\n",
        "    y.next.prev = y\n",
        "    return y\n",
        "\n",
        "  def insert(self, coef, power):\n",
        "    self.n += 1\n",
        "    x = self.head.next\n",
        "    while x != self.head and x.power > power:\n",
        "        x = x.next\n",
        "    self.insert_after(x.prev, coef, power)\n",
        "\n",
        "  def get(self, ind):\n",
        "    if ind >= self.size():\n",
        "      raise Exception(\"Out of list\")\n",
        "    x = self.head.next\n",
        "    for i in range(ind):\n",
        "      x = x.next\n",
        "    return f\"coef : {x.coef}, power : {x.power}\"\n",
        "\n",
        "\n",
        "  def find(self, coef, power):\n",
        "    x = self.head.next\n",
        "    for i in range(self.size()):\n",
        "      if x.coef == coef:\n",
        "        if x.power == power:\n",
        "          return x\n",
        "      x = x.next\n",
        "    raise Exception(\"Doesn't exist\")\n",
        "\n",
        "  def delete(self, x):\n",
        "    if self.size() == 0:\n",
        "        raise Exception(\"List is empty\")\n",
        "    self.n -= 1\n",
        "    x.prev.next = x.next\n",
        "    x.next.prev = x.prev\n",
        "    return x\n",
        "\n",
        "  def size(self):\n",
        "    return self.n\n",
        "\n",
        "  def add(self, coef1, power1, coef2, power2):\n",
        "    node1 = self.find(coef1, power1)\n",
        "    node2 = self.find(coef2, power2)\n",
        "    node1.coef += node2.coef\n",
        "    self.delete(node2)\n",
        "    return None\n",
        "\n",
        "  def mul(self, coef1, power1, coef2, power2):\n",
        "    node1 = self.find(coef1, power1)\n",
        "    node2 = self.find(coef2, power2)\n",
        "    if node1.power == node2.power:\n",
        "      result_coef = node1.coef * node2.coef\n",
        "      result_power = node1.power\n",
        "      self.delete(node1)\n",
        "      self.delete(node2)\n",
        "      self.insert(result_coef, result_power)\n",
        "    elif node1.coef == node2.coef:\n",
        "      result_coef = node1.coef\n",
        "      result_power = node1.power + node2.power\n",
        "      self.delete(node1)\n",
        "      self.delete(node2)\n",
        "      self.insert(result_coef, result_power)\n",
        "    else:\n",
        "      raise Exception(\"multiply operation can't be done!\")"
      ],
      "metadata": {
        "id": "OKAzw4AoOi3G"
      },
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "lst = List()\n",
        "lst.insert(2, 4)\n",
        "lst.insert(3, 3)\n",
        "lst.insert(3, 4)\n",
        "# Add nodes with the same power (power=4)\n",
        "lst.add(3, 4, 2, 4)\n",
        "\n",
        "# Print the result\n",
        "print(lst.get(0))  # Output: coef : 3.0, power : 4"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yEumTIia1iIP",
        "outputId": "0ac05d95-14d8-49c3-f490-bae5945ab83e"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "coef : 5, power : 4\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "lst = List()\n",
        "lst.insert(1, 0)\n",
        "lst.insert(3, 3)\n",
        "lst.insert(1, 4)"
      ],
      "metadata": {
        "id": "9y7qxmlXVoxf"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "lst.get(0)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "dxM0vDzUghj0",
        "outputId": "fd8cc6d4-dca4-4ce7-b73f-742eecb1a799"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'coef : 1, power : 4'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "x = lst.find(3, 3)\n",
        "print(f\"coef : {x.coef}, power : {x.power}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WgGHeEoMhlPC",
        "outputId": "3a5cf551-aec5-419c-bfd8-7df37d04385e"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "coef : 3, power : 3\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "lst.find(0, 2)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 303
        },
        "id": "qRGajApYgi9d",
        "outputId": "31387deb-dacf-4d13-b3a8-e05acf8cc536"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "error",
          "ename": "Exception",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mException\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-6-3442b02554c9>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mlst\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfind\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m<ipython-input-1-0d4e6440be54>\u001b[0m in \u001b[0;36mfind\u001b[0;34m(self, coef, power)\u001b[0m\n\u001b[1;32m     48\u001b[0m           \u001b[0;32mreturn\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     49\u001b[0m       \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnext\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 50\u001b[0;31m     \u001b[0;32mraise\u001b[0m \u001b[0mException\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Doesn't exist\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     51\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     52\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0mdelete\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mException\u001b[0m: Doesn't exist"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "lst.delete(lst.find(3, 3))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "C3U5JHGbhTXI",
        "outputId": "4286333a-3419-42fa-c214-3ea70cb17925"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<__main__.Node at 0x791da6dbc580>"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "lst.find(3, 3)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 303
        },
        "id": "Xe1nGE4SiU8-",
        "outputId": "8a235f12-f3bc-45ea-82ad-2c2592a811da"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "error",
          "ename": "Exception",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mException\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-8-70c3c5fdd4dc>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mlst\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfind\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m3\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m<ipython-input-1-0d4e6440be54>\u001b[0m in \u001b[0;36mfind\u001b[0;34m(self, coef, power)\u001b[0m\n\u001b[1;32m     48\u001b[0m           \u001b[0;32mreturn\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     49\u001b[0m       \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnext\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 50\u001b[0;31m     \u001b[0;32mraise\u001b[0m \u001b[0mException\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Doesn't exist\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     51\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     52\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0mdelete\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mException\u001b[0m: Doesn't exist"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "lst.insert(1, 6)\n",
        "lst.insert(4, 6)\n",
        "lst.add(1, 6, 4, 6)\n",
        "print(lst.get(0))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WQWk1xbGy3Th",
        "outputId": "ac28e442-2c55-4a7c-b438-384c4da6d611"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "coef : 5, power : 6\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "lst.insert(2, 8)\n",
        "lst.insert(3, 8)\n",
        "\n",
        "lst.mul(2, 8, 3, 8)\n",
        "\n",
        "print(lst.get(0))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "S61XlTVI2dSD",
        "outputId": "677d5168-c6c1-4834-d08b-8fb715c0b0a9"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "coef : 6, power : 8\n"
          ]
        }
      ]
    }
  ]
}
